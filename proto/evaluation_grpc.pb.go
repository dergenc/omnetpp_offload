// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EvalClient is the client API for Eval service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvalClient interface {
	Scenario(ctx context.Context, in *EvalScenario, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Action(ctx context.Context, in *ActionEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Run(ctx context.Context, in *RunEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Transfer(ctx context.Context, in *TransferEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Setup(ctx context.Context, in *SetupEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type evalClient struct {
	cc grpc.ClientConnInterface
}

func NewEvalClient(cc grpc.ClientConnInterface) EvalClient {
	return &evalClient{cc}
}

func (c *evalClient) Scenario(ctx context.Context, in *EvalScenario, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/service.Eval/Scenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evalClient) Action(ctx context.Context, in *ActionEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/service.Eval/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evalClient) Run(ctx context.Context, in *RunEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/service.Eval/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evalClient) Transfer(ctx context.Context, in *TransferEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/service.Eval/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evalClient) Setup(ctx context.Context, in *SetupEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/service.Eval/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvalServer is the server API for Eval service.
// All implementations must embed UnimplementedEvalServer
// for forward compatibility
type EvalServer interface {
	Scenario(context.Context, *EvalScenario) (*emptypb.Empty, error)
	Action(context.Context, *ActionEvent) (*emptypb.Empty, error)
	Run(context.Context, *RunEvent) (*emptypb.Empty, error)
	Transfer(context.Context, *TransferEvent) (*emptypb.Empty, error)
	Setup(context.Context, *SetupEvent) (*emptypb.Empty, error)
	mustEmbedUnimplementedEvalServer()
}

// UnimplementedEvalServer must be embedded to have forward compatible implementations.
type UnimplementedEvalServer struct {
}

func (UnimplementedEvalServer) Scenario(context.Context, *EvalScenario) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scenario not implemented")
}
func (UnimplementedEvalServer) Action(context.Context, *ActionEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}
func (UnimplementedEvalServer) Run(context.Context, *RunEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedEvalServer) Transfer(context.Context, *TransferEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedEvalServer) Setup(context.Context, *SetupEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedEvalServer) mustEmbedUnimplementedEvalServer() {}

// UnsafeEvalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvalServer will
// result in compilation errors.
type UnsafeEvalServer interface {
	mustEmbedUnimplementedEvalServer()
}

func RegisterEvalServer(s grpc.ServiceRegistrar, srv EvalServer) {
	s.RegisterService(&Eval_ServiceDesc, srv)
}

func _Eval_Scenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalScenario)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalServer).Scenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Eval/Scenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalServer).Scenario(ctx, req.(*EvalScenario))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eval_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Eval/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalServer).Action(ctx, req.(*ActionEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eval_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Eval/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalServer).Run(ctx, req.(*RunEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eval_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Eval/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalServer).Transfer(ctx, req.(*TransferEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eval_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvalServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Eval/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvalServer).Setup(ctx, req.(*SetupEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// Eval_ServiceDesc is the grpc.ServiceDesc for Eval service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eval_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Eval",
	HandlerType: (*EvalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scenario",
			Handler:    _Eval_Scenario_Handler,
		},
		{
			MethodName: "Action",
			Handler:    _Eval_Action_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Eval_Run_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Eval_Transfer_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _Eval_Setup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evaluation.proto",
}
