// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	NewSimulation(ctx context.Context, in *Simulation, opts ...grpc.CallOption) (*SimulationReply, error)
	Link(ctx context.Context, opts ...grpc.CallOption) (Broker_LinkClient, error)
	Results(ctx context.Context, in *WorkResult, opts ...grpc.CallOption) (*WorkAffirmation, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) NewSimulation(ctx context.Context, in *Simulation, opts ...grpc.CallOption) (*SimulationReply, error) {
	out := new(SimulationReply)
	err := c.cc.Invoke(ctx, "/service.Broker/NewSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Link(ctx context.Context, opts ...grpc.CallOption) (Broker_LinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Broker_ServiceDesc.Streams[0], "/service.Broker/Link", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerLinkClient{stream}
	return x, nil
}

type Broker_LinkClient interface {
	Send(*ClientInfo) error
	Recv() (*Tasks, error)
	grpc.ClientStream
}

type brokerLinkClient struct {
	grpc.ClientStream
}

func (x *brokerLinkClient) Send(m *ClientInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerLinkClient) Recv() (*Tasks, error) {
	m := new(Tasks)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Results(ctx context.Context, in *WorkResult, opts ...grpc.CallOption) (*WorkAffirmation, error) {
	out := new(WorkAffirmation)
	err := c.cc.Invoke(ctx, "/service.Broker/Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/service.Broker/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	NewSimulation(context.Context, *Simulation) (*SimulationReply, error)
	Link(Broker_LinkServer) error
	Results(context.Context, *WorkResult) (*WorkAffirmation, error)
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (UnimplementedBrokerServer) NewSimulation(context.Context, *Simulation) (*SimulationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSimulation not implemented")
}
func (UnimplementedBrokerServer) Link(Broker_LinkServer) error {
	return status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedBrokerServer) Results(context.Context, *WorkResult) (*WorkAffirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Results not implemented")
}
func (UnimplementedBrokerServer) Status(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_NewSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Simulation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).NewSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Broker/NewSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).NewSimulation(ctx, req.(*Simulation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Link_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Link(&brokerLinkServer{stream})
}

type Broker_LinkServer interface {
	Send(*Tasks) error
	Recv() (*ClientInfo, error)
	grpc.ServerStream
}

type brokerLinkServer struct {
	grpc.ServerStream
}

func (x *brokerLinkServer) Send(m *Tasks) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerLinkServer) Recv() (*ClientInfo, error) {
	m := new(ClientInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Broker/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Results(ctx, req.(*WorkResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Broker/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSimulation",
			Handler:    _Broker_NewSimulation_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _Broker_Results_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Broker_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Link",
			Handler:       _Broker_Link_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "broker.proto",
}
