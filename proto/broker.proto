syntax = "proto3";
package service;

option go_package = "./proto";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "storage.proto";

service Broker {
  rpc ExecuteSimulation  (Simulation)              returns (SimulationReply)    {}
  rpc TaskSubscription   (stream ResourceCapacity) returns (stream Tasks)       {}
  rpc CommitResults      (WorkResult)              returns (WorkAffirmation)    {}
  rpc StatusSubscription (StatusRequest)           returns (stream StatusReply) {}
}

message ResourceCapacity {
  // Workers id
  string workerId = 1;

  // Time
  google.protobuf.Timestamp timestamp = 2;

  // Number of available cores
  int32 freeResources = 3;
}

message Task {
  // Simulation ID
  string simulationId = 1;

  // Path to simulation source code
  StorageRef source = 2;

  // Simulation config name (-c argument)
  string config = 3;

  // Simulation run (-r argument)
  string runNumber = 4;
}

message Tasks {
  // Config name and run number
  repeated Task items = 3;
}

message Config {
  // Name of the configuration, this will be passed as -c parameter
  string name = 1;

  // Array with configuration numbers, this will be passed with -r
  repeated string runNumbers = 2;
}

message Simulation {
  // Simulation Id (generated by the client)
  string simulationId = 1;

  // Simulation source reference
  StorageRef source = 2;

  // Simulation configs that shall be executed
  repeated Config configs = 3;
}

message SimulationReply {
  // Simulation id
  string simulationId = 1;

  // Check for success
  optional string error = 2;
}

message WorkResult {
  // Work
  Task task = 1;

  // Error
  string error = 2;

  // Results path
  StorageRef results = 3;
}

message WorkAffirmation {
  // Simulation ID
  string simulationId = 1;

  // Check this var for error handling
  string error = 2;
}

message StatusRequest {
  string simulationId = 1;
}

message StatusReply {
  string simulationId = 1;
}

