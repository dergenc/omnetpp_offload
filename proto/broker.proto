syntax = "proto3";
package service;

option go_package = "./proto";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "storage.proto";

service Broker {
  rpc ExecuteSimulation  (Simulation)              returns (SimulationReply)    {}
  rpc TaskSubscription   (stream ResourceCapacity) returns (stream Tasks)       {}
  rpc CommitResults      (TaskResult)              returns (WorkAffirmation)    {}
  rpc StatusSubscription (StatusRequest)           returns (stream StatusReply) {}
}

message ResourceCapacity {
  // Workers id
  string workerId = 1;

  // Time
  google.protobuf.Timestamp timestamp = 2;

  // Number of available cores
  int32 freeResources = 3;
}

message Task {
  // Simulation Id
  string simulationId = 1;

  // Simulation Config
  OppConfig simulation = 2;

  // Path to simulation source code
  StorageRef source = 3;

  // Simulation config name (-c argument)
  string config = 4;

  // Simulation run (-r argument)
  string runNumber = 5;
}

message Tasks {
  repeated Task items = 3;
}

message OppConfig {
  // buildscript
  string buildScript = 1;

  // This is the directory in which the simulation will be executed
  string basePath = 2;

  // Simulation ini files
  repeated string iniFiles = 3;

  // Ned include directories
  repeated string nedPaths = 4;

  // Run opp_run -l ... instead of running the simulation directly
  bool useLib = 5;

  // Simulation exe or lib
  string simulation = 6;

  // Source code directory
  string sourcePath = 7;

  // Results directory (default is basePath/results)
  string resultsPath = 8;
}

message Simulation {
  // Name tag
  string simulationId = 1;

  // Name tag
  string tag = 2;

  // Simulation config
  OppConfig oppConfig = 3;

  // Simulation source reference
  StorageRef source = 4;

  message RunConfig {
    // Name of the configuration, this will be passed as -c parameter
    string config = 1;

    // Array with configuration numbers, this will be passed with -r
    repeated string runNumbers = 2;
  }

  // Simulation configs that shall be executed
  repeated RunConfig run = 5;
}

message SimulationReply {
  // Simulation id
  string simulationId = 1;

  // Check for success
  optional string error = 2;
}

message TaskResult {
  // Work
  Task task = 1;

  // Error
  string error = 2;

  // Results path
  StorageRef results = 3;
}

message WorkAffirmation {
  // Simulation ID
  string simulationId = 1;

  // Check this var for error handling
  string error = 2;
}

message StatusRequest {
  string simulationId = 1;
}

message StatusReply {
  string simulationId = 1;
}

